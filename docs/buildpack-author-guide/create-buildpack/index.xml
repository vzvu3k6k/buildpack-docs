<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Create a buildpack on Cloud Native Buildpack Documentation</title>
    <link>/docs/buildpack-author-guide/create-buildpack/</link>
    <description>Recent content in Create a buildpack on Cloud Native Buildpack Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/docs/buildpack-author-guide/create-buildpack/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Set up your local environment</title>
      <link>/docs/buildpack-author-guide/create-buildpack/setup-local-environment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/buildpack-author-guide/create-buildpack/setup-local-environment/</guid>
      <description>First, we&amp;rsquo;ll create a sample Ruby app that you can use when developing your buildpack:
mkdir -p ~/workspace/ruby-sample-app cd ~/workspace/ruby-sample-app Create a file in the current directory called app.rb with the following contents:
require &amp;#39;sinatra&amp;#39; set :bind, &amp;#39;0.0.0.0&amp;#39; set :port, 8080 get &amp;#39;/&amp;#39; do &amp;#39;Hello World!&amp;#39; end Then, create a file called Gemfile with the following contents:
source &amp;#34;https://rubygems.org&amp;#34; git_source(:github) {|repo_name| &amp;#34;https://github.com/#{repo_name}&amp;#34; } gem &amp;#34;sinatra&amp;#34; Now, let&amp;rsquo;s create the directory where your buildpack will live:</description>
    </item>
    
    <item>
      <title>Building blocks of a Cloud Native Buildpack</title>
      <link>/docs/buildpack-author-guide/create-buildpack/building-blocks-cnb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/buildpack-author-guide/create-buildpack/building-blocks-cnb/</guid>
      <description>Now we will set up the buildpack scaffolding. You will need to make these files in your ruby-cnb directory
cd ~/workspace/ruby-cnb buildpack.toml Once you are in the ruby-cnb directory, you will need to create a buildpack.toml file in that directory. This file must exist in the root directory of your buildpack so the pack CLI knows it is a buildpack and it can apply the build lifecycle to it.</description>
    </item>
    
    <item>
      <title>Detecting your application</title>
      <link>/docs/buildpack-author-guide/create-buildpack/detection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/buildpack-author-guide/create-buildpack/detection/</guid>
      <description>Next, you will want to actually detect that the app your are building is a Ruby app. In order to do this, you will need to check for a Gemfile.
Replace exit 1 in the detect script with the following check:
if [[ ! -f Gemfile ]]; then exit 100 fi Your detect script should look like this:
#!/usr/bin/env bash set -eo pipefail if [[ ! -f Gemfile ]]; then exit 100 fi Next, rebuild your app with the updated buildpack:</description>
    </item>
    
    <item>
      <title>Building your application</title>
      <link>/docs/buildpack-author-guide/create-buildpack/build-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/buildpack-author-guide/create-buildpack/build-app/</guid>
      <description>Next, we&amp;rsquo;ll make the build step install dependencies. This will require a few updates to the build script. Change it to look like the following:
#!/usr/bin/env bash set -eo pipefail echo &amp;#34;---&amp;gt; Ruby Buildpack&amp;#34; # 1. GET ARGS layersdir=$1 # 2. DOWNLOAD RUBY echo &amp;#34;---&amp;gt; Downloading and extracting Ruby&amp;#34; rubylayer=&amp;#34;$layersdir&amp;#34;/ruby mkdir -p &amp;#34;$rubylayer&amp;#34; ruby_url=https://s3-external-1.amazonaws.com/heroku-buildpack-ruby/heroku-18/ruby-2.5.1.tgz wget -q -O - &amp;#34;$ruby_url&amp;#34; | tar -xzf - -C &amp;#34;$rubylayer&amp;#34; # 3. MAKE RUBY AVAILABLE DURING LAUNCH echo -e &amp;#39;launch = true&amp;#39; &amp;gt; &amp;#34;$rubylayer.</description>
    </item>
    
    <item>
      <title>Make your application runnable</title>
      <link>/docs/buildpack-author-guide/create-buildpack/make-app-runnable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/buildpack-author-guide/create-buildpack/make-app-runnable/</guid>
      <description>To make your app runnable, we need to set a default start command. Add the following to the end of your build script:
# Set default start command echo &amp;#39;processes = [{ type = &amp;#34;web&amp;#34;, command = &amp;#34;bundle exec ruby app.rb&amp;#34;}]&amp;#39; &amp;gt; &amp;#34;$layersdir/launch.toml&amp;#34; Your full build script should now look like the following:
#!/usr/bin/env bash set -eo pipefail echo &amp;#34;---&amp;gt; Ruby Buildpack&amp;#34; # 1. GET ARGS layersdir=$1 # 2. DOWNLOAD RUBY echo &amp;#34;---&amp;gt; Downloading and extracting Ruby&amp;#34; rubylayer=&amp;#34;$layersdir&amp;#34;/ruby mkdir -p &amp;#34;$rubylayer&amp;#34; ruby_url=https://s3-external-1.</description>
    </item>
    
    <item>
      <title>Improving performance with caching</title>
      <link>/docs/buildpack-author-guide/create-buildpack/caching/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/buildpack-author-guide/create-buildpack/caching/</guid>
      <description>We can improve performance by caching dependencies between builds, only re-downloading when necessary. To begin, let&amp;rsquo;s create a cacheable bundler layer.
Creating the bundler layer To do this replace the following lines in the build script:
echo &amp;#34;---&amp;gt; Installing gems&amp;#34; bundle install with the following:
echo &amp;#34;---&amp;gt; Installing gems&amp;#34; bundlerlayer=&amp;#34;$layersdir/bundler&amp;#34; mkdir &amp;#34;$bundlerlayer&amp;#34; echo -e &amp;#39;cache = true\nlaunch = true&amp;#39; &amp;gt; &amp;#34;$bundlerlayer.toml&amp;#34; bundle install --path &amp;#34;$bundlerlayer&amp;#34; --binstubs &amp;#34;$bundlerlayer/bin&amp;#34; Your full build script should now look like the following:</description>
    </item>
    
    <item>
      <title>Making your buildpack configurable</title>
      <link>/docs/buildpack-author-guide/create-buildpack/make-buildpack-configurable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/buildpack-author-guide/create-buildpack/make-buildpack-configurable/</guid>
      <description>It&amp;rsquo;s likely that not all Ruby apps will want to use the same version of Ruby. Let&amp;rsquo;s make the Ruby version configurable.
Select Ruby version We&amp;rsquo;ll allow buildpack users to define the desired Ruby version via a .ruby-version file in their app. We&amp;rsquo;ll first update the detect script to check for this file and record its contents into the build plan:
#!/usr/bin/env bash set -eo pipefail if [[ ! -f Gemfile ]]; then exit 100 fi # ======= ADDED ======= plan=$2 version=2.</description>
    </item>
    
  </channel>
</rss>